"02.1";"Hi everyone. Happy to be here."
"02.2";"Let’s first import some sample data. For that let me create a notebook."
"03";"We can create a folder to organize it better."
"04";"You may want to rename your notebook."
"05";"As an example, I’m going to use the Binance API to get a list of currency symbols and some additional metadata"
"06";"Let’s do that with python"
"07";"With the standard request library I’m going to create a request to the Binance REST API"
"08";"Define a base URL for the API address and a resource to parameterize the queried object, in this case the exchange info"
"09";"We can store the response as JSON in a variable called data"
"10";"Let’s print the results to get an idea of the object schema"
"11";"Data is a complex object, but I know in advance that it contains an array called symbols"
"12";"So let’s move on and open a new paragraph"
"13";"I’m going to create an empty list and iterate over the symbols array in data"
"14";"I want to append every currency symbol"
"15";"Let’s have a look again at the object schema to select some additional attributes"
"16";"Suppose the following attributes are valuable for your business or your use case"
"17";"I selected symbol, status, base asset, and quote asset"
"18";"We need to define the column names"
"19";"And now we can create a data frame"
"20";"We can display its first rows to check our progress"
"21";"I forgot the parentheses to create the tuples"
"22";"Now we can see our preliminary results in a tabular format"
"23";"The next step is to persist the created data frame as a delta table"
"24";"For that, and this is why I love synapse so much, I already linked a storage account to the workspace"
"25";"In the demo container we can create a new folder. Let’s use development, source and create a new folder called BNC for the new data source. Inside it we can create a folder called symbol to store the delta table"
"26";"In the folder info we can get the URL we need to access this location from our notebook"
"27";"Now we can finalize the data location"
"28";"We are going to write the symbol data frame, overwriting the data if exists, using the delta format, to the location defined above"
"29";"If we now navigate the symbol folder, we can see the delta table log and the data files"
"30";"We can reduce the number of files repartitioning the data frame but let’s skip optimizations for future videos"
"31";"Now let’s do something even better. We can create a data lake database to expose this data to business users"
"32";"For that we can use Spark SQL and the create database or create schema statement"
"33";"In fact, Azure Synapse already provides a functionality for that"
"34";"In the data tab, we can select the plus symbol and then Lake database"
"35";"Unfortunately delta format is not supported and we can only select Parquet or delimited text"
"36";"As a workaround, just define the name of the database, select parquet, leave the other values by default and publish it"
"37";"This will do the trick and create the database for our delta table"
"38";"We can return to our notebook, and I will show you how to create the database with code"
"39";"You may need to refresh the lake databases"
"40";"Now we are ready to create a table in our lake database pointing to the delta table in the storage account"
"41";"Let’s first define the location and copy the value from the paragraph above"
"42";"In spark SQL, create a table in the BNC 2 database called symbol using delta location"
"43";"You can use you preferred python method to add the delta table path variable to the create statement string"
"44";"I forgot to put the path into single quotes"
"45";"Now the table is created. You may need to refresh again"
"46";"You can see the table and its columns under the database BNC 2"
"47";"Now business users can use SQL to query the data in a simple way"
"48";"Let’s for example order the data by the symbol"
"49";"We also have intellisense for SQL, I love it"
"50";"And here we finished our demo. I hope you find it useful"